def read_graph(filename):
    with open(filename, "r") as file:
        n = int(file.readline())
        adj = []
        for _ in range(n):
            line = file.readline().strip()
            neighbors = list(map(int, line.split()))
            if neighbors == [0]:
                adj.append([])
            else:
                adj.append([v - 1 for v in neighbors])  
    return n, adj

def dfs(u, visited, adj):
    visited[u] = True
    for v in adj[u]:
        if not visited[v]:
            dfs(v, visited, adj)

def is_strongly_connected(n, adj):
    for i in range(n):
        visited = [False] * n
        dfs(i, visited, adj)
        if not all(visited):
            return False
    return True

def is_weakly_connected(n, adj):
    undirected = [[] for _ in range(n)]
    for u in range(n):
        for v in adj[u]:
            undirected[u].append(v)
            undirected[v].append(u)
    visited = [False] * n
    dfs(0, visited, undirected)
    return all(visited)

def main():
    n, adj = read_graph("dske.in")

    if is_strongly_connected(n, adj):
        print("Strongly connected graph.")
    elif is_weakly_connected(n, adj):
        print("Weakly connected graph.")
    else:
        print("The graph is neither strongly connected nor weakly connected.")

if __name__ == "__main__":
    main() 